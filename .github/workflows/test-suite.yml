name: Test Suite CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:

jobs:
  api-tests:
    name: API Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create reports directory
      run: mkdir -p reports/allure-results
    
    - name: Run API tests
      run: |
        pytest api_tests/tests/ -m api -v \
          --html=reports/api-report.html \
          --self-contained-html \
          --alluredir=reports/allure-results \
          --junitxml=reports/junit-api.xml
      continue-on-error: false
    
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: api-test-reports-${{ matrix.python-version }}
        path: |
          reports/
          logs/
        retention-days: 30
    
    - name: Publish test results
      if: always()
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: reports/junit-api.xml
        check_name: API Test Results (Python ${{ matrix.python-version }})

  ui-tests:
    name: UI Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10']
        browser: ['chrome', 'firefox']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install Chrome
      if: matrix.browser == 'chrome'
      uses: browser-actions/setup-chrome@latest
    
    - name: Install Firefox
      if: matrix.browser == 'firefox'
      uses: browser-actions/setup-firefox@latest
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create reports directory
      run: mkdir -p reports/allure-results ui_tests/reports/screenshots
    
    - name: Run UI tests
      env:
        BROWSER: ${{ matrix.browser }}
        HEADLESS: true
      run: |
        pytest ui_tests/tests/ -m ui -v \
          --html=reports/ui-report-${{ matrix.browser }}.html \
          --self-contained-html \
          --alluredir=reports/allure-results \
          --junitxml=reports/junit-ui-${{ matrix.browser }}.xml
      continue-on-error: false
    
    - name: Upload test reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: ui-test-reports-${{ matrix.browser }}-py${{ matrix.python-version }}
        path: |
          reports/
          ui_tests/reports/
          logs/
        retention-days: 30
    
    - name: Publish test results
      if: always()
      uses: EnricoMi/publish-unit-test-result-action@v2
      with:
        files: reports/junit-ui-${{ matrix.browser }}.xml
        check_name: UI Test Results (${{ matrix.browser }} - Python ${{ matrix.python-version }})

  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install Chrome
      uses: browser-actions/setup-chrome@latest
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Create reports directory
      run: mkdir -p reports/allure-results
    
    - name: Run smoke tests
      env:
        HEADLESS: true
      run: |
        pytest -m smoke -v \
          --html=reports/smoke-report.html \
          --self-contained-html \
          --alluredir=reports/allure-results
      continue-on-error: false
    
    - name: Upload smoke test reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: smoke-test-reports
        path: reports/
        retention-days: 7

  allure-report:
    name: Generate Allure Report
    runs-on: ubuntu-latest
    needs: [api-tests, ui-tests]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts
    
    - name: Merge allure results
      run: |
        mkdir -p allure-results
        find artifacts -name 'allure-results' -type d -exec cp -r {}/* allure-results/ \;
    
    - name: Generate Allure report
      uses: simple-elf/allure-report-action@master
      if: always()
      with:
        allure_results: allure-results
        allure_report: allure-report
        gh_pages: gh-pages
        allure_history: allure-history
    
    - name: Deploy Allure report to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: allure-history
        publish_branch: gh-pages
        keep_files: true

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort pylint
    
    - name: Run Black
      run: black --check .
      continue-on-error: true
    
    - name: Run isort
      run: isort --check-only .
      continue-on-error: true
    
    - name: Run flake8
      run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true
    
    - name: Run pylint
      run: |
        pylint ui_tests api_tests shared --exit-zero --output-format=text
      continue-on-error: true


